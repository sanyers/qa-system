(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["old-data"],{"0178":function(r,n,t){"use strict";t.r(n),n["default"]="## 数组合并有几种方式\r\n\r\n（1）for\r\n\r\n会变更原数组，当然也可以写成生成新数组的形式。\r\n\r\n```js\r\nlet arr = [1, 2]\r\nlet arr2 = [3, 4]\r\n\r\nfor (let i in arr2) {\r\n    arr.push(arr2[i])\r\n}\r\n\r\nconsole.log(arr)\r\n// [1, 2, 3, 4]\r\n```\r\n\r\n（2）concat\r\n\r\n会生成新的数组。\r\n\r\n```js\r\nlet arr = [1, 2]\r\nlet arr2 = [3, 4]\r\n\r\narr = arr.concat(arr2)\r\n\r\nconsole.log(arr)\r\n// [1, 2, 3, 4]\r\n```\r\n\r\n（3）arr.push.apply\r\n\r\n会变更原数组。\r\n\r\n```js\r\nlet arr = [1, 2]\r\nlet arr2 = [3, 4]\r\n\r\narr.push.apply(arr, arr2)\r\n\r\nconsole.log(arr)\r\n// [1, 2, 3, 4]\r\n```\r\n\r\n（4）[…arr, …arr2]\r\n\r\n会生成新的数组。\r\n\r\n```js\r\nlet arr = [1, 2]\r\nlet arr2 = [3, 4]\r\n\r\narr = [...arr, ...arr2]\r\n\r\nconsole.log(arr)\r\n// [1, 2, 3, 4]\r\n```\r\n\r\n（5）push(…arr)\r\n\r\n会变更原数组。\r\n\r\n```js\r\nlet arr = [1, 2]\r\nlet arr2 = [3, 4]\r\n\r\narr.push(...arr2)\r\n\r\nconsole.log(arr)\r\n// [1, 2, 3, 4]\r\n```\r\n\r\n参考：\r\n\r\nhttps://blog.csdn.net/github_35780607/article/details/110528481"},"082b":function(r,n,t){"use strict";t.r(n),n["default"]="## JavaScript原型，原型链 ? 有什么特点？\r\n\r\n- 每个对象都会在其内部初始化一个属性，就是prototype(原型)，当我们访问一个对象的属性时，如果这个对象内部不存在这个属性，那么他就会去prototype里找这个属性，这个prototype又会有自己的prototype，于是就这样一直找下去，也就是我们平时所说的原型链的概念。\r\n- 关系：instance.constructor.prototype = instance.proto\r\n- 特点：\r\n  JavaScript对象是通过引用来传递的，我们创建的每个新对象实体中并没有一份属于自己的原型副本。当我们修改原型时，与之相关的对象也会继承这一改变。"},1081:function(r,n,t){"use strict";t.r(n),n["default"]="## 介绍一下 CSS 的盒子模型？\r\n\r\n有两种， IE 盒子模型、W3C 盒子模型；\r\n\r\n盒模型： 内容(content)、填充(padding)、边界(margin)、 边框(border)；\r\n\r\n区 别： IE 的 content 部分把 border 和 padding 计算了进去;"},1796:function(r,n,t){"use strict";t.r(n),n["default"]="## 什么是 JavaScript 中的包装类型？\r\n\r\n为了方便操作原始值，JavaScript 提供了 3 种特殊的引用类型：Boolean、Number 和 String。\r\n\r\n每当用到某个原始值的方法或属性时，后台都会创建一个相应原始包装类型的对象，从而暴露出操作原始值的各种方法。"},"1f27":function(r,n,t){"use strict";t.r(n),n["default"]="## 判断数组的方式有哪些？\r\n\r\n```js\r\n// 1. 通过 instanceof 判定\r\narr instanceof Array\r\n\r\n// 2. 通过 constructor 判定\r\narr.constructor == Array\r\n\r\n// 3. Object.protype.toString.call 判定\r\nObject.protype.toString.call(arr) == '[Object Array]'\r\n\r\n// 4. 通过原型链做判断\r\narr.__proto__ === Array.prototype;\r\n\r\n// 5. 通过 ES6 的 Array.isArray() 做判断\r\nArray.isArrray(arr);\r\n\r\n// 6. 通过 Array.prototype.isPrototypeOf 判定\r\nArray.prototype.isPrototypeOf(arr)\r\n```"},"218b":function(r,n,t){"use strict";t.r(n),n["default"]="## js 的数据类型的转换\r\n\r\n在 JS 中类型转换只有三种情况，分别是：\r\n\r\n- 转换为布尔值（调用 Boolean() 方法）\r\n- 转换为数字（调用 Number()、parseInt() 和 parseFloat() 方法）\r\n- 转换为字符串（调用 .toString() 或者 String() 方法）\r\n\r\n> null 和 underfined 没有 .toString 方法"},"2aab":function(r,n,t){"use strict";t.r(n),n["default"]="## typeof null 的结果是什么，为什么？\r\n\r\ntypeof null 的结果是 Object。\r\n\r\n在 JavaScript 第一个版本中，所有值都存储在 32 位的单元中，每个单元包含一个小的 类型标签(1-3 bits) 以及当前要存储值的真实数据。类型标签存储在每个单元的低位中，共有五种数据类型：\r\n\r\n```\r\n000: object   - 当前存储的数据指向一个对象。\r\n  1: int      - 当前存储的数据是一个 31 位的有符号整数。\r\n010: double   - 当前存储的数据指向一个双精度的浮点数。\r\n100: string   - 当前存储的数据指向一个字符串。\r\n110: boolean  - 当前存储的数据是布尔值。\r\n```\r\n\r\n如果最低位是 1，则类型标签标志位的长度只有一位；如果最低位是 0，则类型标签标志位的长度占三位，为存储其他四种数据类型提供了额外两个 bit 的长度。\r\n\r\n有两种特殊数据类型：\r\n\r\n- undefined 的值是 (-2)30(一个超出整数范围的数字)；\r\n- null 的值是机器码 NULL 指针空对象(null 指针的值全是 0)\r\n\r\n那也就是说 null 的类型标签也是 000，和 Object 的类型标签一样，所以会被判定为 Object。"},3031:function(r,n,t){"use strict";t.r(n),n["default"]="## == 操作符的强制类型转换规则？\r\n\r\n对于 == 来说，如果对比双方的类型不一样，就会进行类型转换。假如对比 x 和 y 是否相同，就会进行如下判断流程：\r\n\r\n1. 首先会判断两者类型是否相同，相同的话就比较两者的大小；\r\n2. 类型不相同的话，就会进行类型转换；\r\n3. 会先判断是否在对比 null 和 undefined，是的话就会返回 true\r\n4. 判断两者类型是否为 string 和 number，是的话就会将字符串转换为 number\r\n5. 判断其中一方是否为 boolean，是的话就会把 boolean 转为 number 再进行判断\r\n6. 判断其中一方是否为 object 且另一方为 string、number 或者 symbol，是的话就会把 object 转为原始类型再进行判断\r\n\r\n`1 == '1'` => `1 == 1`\r\n\r\n`'1' == true` => `'1' == 1` => `1  ==  1`\r\n\r\n`'1' == { name: 'js' }` => `'1' == '[object Object]'`"},3161:function(r,n,t){"use strict";t.r(n),n["default"]="## documen.write 和 innerHTML 的区别？\r\n\r\n- `document.write` 只能重绘整个页面\r\n- `innerHTML` 可以重绘页面的一部分"},"341c":function(r,n,t){"use strict";t.r(n),n["default"]="## 简述一下你对 HTML 语义化的理解？\r\n\r\n- 用正确的标签做正确的事情。\r\n- html 语义化让页面的内容结构化，结构更清晰，便于对浏览器、搜索引擎解析；即使在没有样式 CSS 情况下也以一种文档格式显示，并且是容易阅读的;\r\n- 搜索引擎的爬虫也依赖于 HTML 标记来确定上下文和各个关键字的权重，利于 SEO;\r\n- 使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解。"},3535:function(r,n,t){"use strict";t.r(n),n["default"]="## 介绍一下闭包和闭包常用场景？\r\n\r\n- 闭包是指有权访问另一个函数作用域中的变量的函数，创建闭包常见方式，就是在一个函数的内部创建另一个函数\r\n- 使用闭包主要为了设计私有的方法和变量，闭包的优点是可以避免变量的污染，缺点是闭包会常驻内存，会增大内存使用量，使用不当很容易造成内存泄露。在js中，函数即闭包，只有函数才会产生作用域的概念。\r\n- 闭包有三个特性：\r\n  - 函数嵌套函数\r\n  - 函数内部可以引用外部的参数和变量\r\n  - 参数和变量不会被垃圾回收机制回收\r\n- 应用场景，设置私有变量的方法\r\n- 不适用场景：返回闭包的函数是个非常大的函数\r\n- 闭包的缺点就是常驻内存，会增大内存使用量，使用不当会造成内存泄漏"},3870:function(r,n,t){"use strict";t.r(n),n["default"]="## vue 的生命周期钩子\r\n\r\n重点：beforeCreate => created => beforeMount => mounted => beforeUpdate => updated => beforeDestory => destoryed\r\n\r\n- beforeCreate\r\n\r\n1. 初始化了部分参数（调用 initInternalComponent），如果有相同的参数，做了参数合并（调用 mergeOptions）\r\n2. 初始化组件实例关系属性，比如 $parent、$children、$root、$refs、$router、$store 等（调用 initLifecycle)\r\n3. 初始化自定义事件(调用 initEvents)\r\n4. 解析组件的插槽信息，得到 vm.$slot，处理渲染函数，得到 vm.$createElement 方法，即 h 函数（调用 initRender）\r\n5. 执行 beforeCreate钩子\r\n\r\n- created\r\n\r\n1. 初始化组件的 inject 配置项(调用 initInjections)\r\n2. 数据响应式的重点，处理 props、methods、data、computed、watch(调用 initState)\r\n3. 解析组件配置项上的 provide 对象，将其挂载到 vm._provided 属性上(调用 initProvide)\r\n4. 执行 created 钩子\r\n\r\n- beforeMount\r\n\r\n检查是否存在 el 属性，存在的话进行渲染 dom 操作，执行 beforeMount (这个里面基本没什么操作)\r\n\r\n- mounted\r\n\r\n实例化 Watcher ，渲染 dom，执行 mounted\r\n\r\n- beforeUpdate\r\n\r\n在渲染 dom 后，执行了 mounted 钩子后，在数据更新的时候，执行 beforeUpdate\r\n\r\n- updated\r\n\r\n检查当前的 watcher 列表中，是否存在当前要更新数据的 watcher ，如果存在就执行 updated\r\n\r\n- beforeDestroy\r\n\r\n检查是否已经被卸载，如果已经被卸载，就直接 return 出去，否则执行 beforeDestroy\r\n\r\n- destroyed\r\n\r\n把所有有关自己痕迹的地方，都给删除掉\r\n\r\n- activated \r\n\r\nkeep-alive 专属，组件被激活时调用\r\n\r\n- deactivated \r\n\r\nkeep-alive 专属，组件被销毁时调用"},"3b16":function(r,n,t){"use strict";t.r(n),n["default"]="## 判断一个值是什么类型有哪些方法？\r\n\r\n类型检查有四种方式，分别为 typeof、instanceof、constructor 和 Object.prototype.toString()。\r\n\r\n```js\r\n// 通过 typeof 操作符来判断一个值属于哪种原始类型\r\ntypeof 'seymoe' // 'string'\r\n\r\n// 通过 instanceof 操作符可以对引用类型进行判定\r\n[] instanceof Array // true\r\n\r\n// 通过 constructor 构造器返回数据类型\r\n(2).constructor === Number // true\r\n\r\n// 通过 Object.prototype.toString() 可以判定 JavaScript 中所有数据类型\r\nObject.prototype.toString.call({}) // '[object Object]'\r\n```"},"3c85":function(r,n,t){"use strict";t.r(n),n["default"]="## 组件中 data 为什么是一个函数\r\n\r\n重点：可复用组件 data 是一个函数，每次使用 data 都将返回一个对象的独立的拷贝，组件之间互不影响\r\n\r\n为什么组件中的 data 必须是一个函数，然后 return 一个对象，而 new Vue 实例里，data 可以直接是一个对象？\r\n\r\n- 因为组件是用来复用的，且 JS 里对象是**引用类型**\r\n- 如果组件中 data 是一个对象，这样作用域就没有隔离，子组件中的 data 属性值会相互影响\r\n- 如果组件中 data 选项是一个函数，那么每个实例可以维护一份被返回对象的独立的拷贝，组件实例之间的 data 属性值不会互相影响\r\n- 而 new Vue 的实例，是不会被复用的，因此不存在引用对象的问题。\r\n\r\n组件中的 data 写成一个函数，数据以函数返回值形式定义，这样每复用一次组件，就会返回一份新的 data，类似于给每个组件实例创建一个私有的数据空间，让各个组件实例维护各自的数据。而单纯的写成对象形式，就使得所有组件实例共用了一份 data，就会造成一个变了全都会变的结果"},"456a":function(r,n,t){"use strict";t.r(n),n["default"]='## undefined 与 undeclared 的区别？\r\n\r\n- 已在作用域中声明但还没有赋值的变量，是 undefined。\r\n- 相反，还没有在作用域中声明过的变量，是 undeclared 的。\r\n\r\n```js\r\nfunction foo() {\r\n  "use strict";\r\n  bar = true;\r\n}\r\nfoo(); // ReferenceError: assignment to undeclared variable bar\r\n```\r\n\r\n对于 undeclared 变量的引用，浏览器会报引用错误，如 ReferenceError: b is not defined 。但是我们可以使用 typeof 的安全防范机制来避免报错，因为对于 undeclared（或者 not defined ）变量，typeof 会返回 "undefined"。'},"4db8":function(r,n,t){"use strict";t.r(n),n["default"]='## script 的 async 和 defer\r\n\r\n`<script>` 元素有下列 8 个属性：\r\n\r\n- `async`：可选。表示应该立即开始下载脚本，但不能阻止其他页面动作，比如下载资源或等待其他脚本加载。只对外部脚本文件有效。\r\n- `defer`：可选。表示脚本可以延迟到文档完全被解析和显示之后再执行。只对外部脚本文件有效。在 IE7 及更早的版本中，对行内脚本也可以指定这个属性。\r\n- `charset`：可选。使用 src 属性指定的代码字符集。这个属性很少使用，因为大多数浏览器不在乎它的值。\r\n- `crossorigin`：可选。配置相关请求的 CORS（跨源资源共享）设置。默认不使用 CORS。\r\n  - `crossorigin="anonymous"` 配置文件请求不必设置凭据标志。\r\n  - `crossorigin="use-credentials"` 设置凭据标志，意味着出站请求会包含凭据。\r\n- `integrity`：可选。允许比对接收到的资源和指定的加密签名以验证子资源完整性（SRI，Subresource Integrity）。如果接收到的资源的签名与这个属性指定的签名不匹配，则页面会报错，脚本不会执行。这个属性可以用于确保内容分发网络（CDN，Content Delivery Network）不会提供恶意内容。\r\n- `language`：废弃。最初用于表示代码块中的脚本语言（如"JavaScript"、"JavaScript 1.2"或"VBScript"）。大多数浏览器都会忽略这个属性，不应该再使用它。\r\n- `src`：可选。表示包含要执行的代码的外部文件。\r\n- `type`：可选。代替 language，表示代码块中脚本语言的内容类型（也称 MIME 类型）。'},"504c":function(r,n,t){"use strict";t.r(n),n["default"]="## 标签上 title 与 alt 属性的区别是什么？\r\n\r\n- alt 是给搜索引擎识别，在图像无法显示时的替代文本；\r\n- title 是关于元素的注释信息，主要是给用户解读。\r\n- 当鼠标放到文字或是图片上时有 title 文字显示。（因为 IE 不标准）在 IE 浏览器中 alt 起到了 title 的作用，变成文字提示。\r\n- 在定义 img 对象时，将 alt 和 title 属性写全，可以保证在各种浏览器中都能正常使用。"},5678:function(r,n,t){"use strict";t.r(n),n["default"]="## css 选择器优先级？\r\n\r\n!important > 行内样式（比重1000）> ID 选择器（比重100） > 类选择器（比重10） > 标签（比重1） > 通配符 > 继承 > 浏览器默认属性"},"5ede":function(r,n,t){"use strict";t.r(n),n["default"]="## || 和 && 操作符的返回值？\r\n\r\n|| 和 && 首先会对第一个操作数执行条件判断，如果其不是布尔值就先强制转换为布尔类型，然后再执行条件判断。\r\n\r\n- 对于 || 来说，如果条件判断结果为 true 就返回第一个操作数的值，如果为 false 就返回第二个操作数的值。\r\n- && 则相反，如果条件判断结果为 true 就返回第二个操作数的值，如果为 false 就返回第一个操作数的值。\r\n\r\n|| 和 && 返回它们其中一个操作数的值，而非条件判断的结果"},"664b":function(r,n,t){"use strict";t.r(n),n["default"]="## js 数据类型和值是怎么存储的？\r\n\r\nJavaScript 数据类型分为两种：\r\n\r\n- 简单数据类型（也称为原始类型）：一共有 7 种简单类型，String(字符串)，Number(数字)，BigInt(任意大整数)，Boolean(布尔值)，Null(空值)，Undefined(未定义)，Symbol(符号)。\r\n- 复杂数据类型（引用类型）：Object(对象)。\r\n\r\n存储方式：\r\n\r\n- 原始类型把数据名和值直接存储在栈当中\r\n- 引用类型在栈中存储数据名和一个堆的地址，在堆中存储属性及值。访问时先从栈获取地址，再到堆中拿出相应的值。"},"6aa9":function(r,n,t){"use strict";t.r(n),n["default"]="## 请解释一下 JavaScript 的同源策略？\r\n\r\n概念:同源策略是客户端脚本，其目的是防止某个文档或脚本从多个不同源装载。\r\n\r\n这里的同源策略指的是：协议，域名，端口相同，同源策略是一种安全协议。\r\n\r\n指一段脚本只能读取来自同一来源的窗口和文档的属性。"},"6d21":function(r,n,t){"use strict";t.r(n),n["default"]="## Object.is() 与比较操作符 “===”、“==” 的区别？\r\n\r\n- ==，当且仅当两个运算数相等时，它返回 true，即不检查数据类型\r\n- ===，只有在无需类型转换运算数就相等的情况下，才返回 true，需要检查数据类型\r\n- 使用 Object.is 来进行相等判断时，一般情况下和 === 的判断相同，它处理了一些特殊的情况，比如 -0 和 +0 不再相等，两个 NaN 是相等的。"},"6f3b":function(r,n,t){"use strict";t.r(n),n["default"]="## isNaN 和 Number.isNaN 函数的区别？\r\n\r\n- 函数 isNaN 接收参数后，会尝试将这个参数转换为数值，任何不能被转换为数值的的值都会返回 true，因此非数字值传入也会返回 true ，会影响 NaN 的判断。\r\n- 函数 Number.isNaN 会首先判断传入参数是否为数字，如果是数字再继续判断是否为 NaN ，不会进行数据类型的转换，这种方法对于 NaN 的判断更为准确。"},"72cb":function(r,n,t){"use strict";t.r(n),n["default"]="## JSON 的了解？\r\n\r\n- JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。\r\n- 它是基于JavaScript的一个子集。数据格式简单, 易于读写, 占用带宽小\r\n`{'age':'12', 'name':'back'}`"},8150:function(r,n,t){"use strict";t.r(n),n["default"]='## typeof NaN 的结果是什么？\r\n\r\nNaN 指“不是一个数字”（not a number），NaN 是一个“警戒值”（sentinel value，有特殊用途的常规值），用于指出数字类型中的错误情况，即“执行数学运算没有成功，这是失败后返回的结果”。\r\n\r\n```js\r\ntypeof NaN; // "number"\r\n```\r\n\r\nNaN 是一个特殊值，它和自身不相等，是唯一一个非自反（自反，reflexive，即 x === x 不成立）的值。而 NaN !== NaN 为 true。'},"88c2":function(r,n,t){"use strict";t.r(n),n["default"]="## intanceof 操作符的实现原理及实现\r\n\r\ninstanceof 运算符用于判断构造函数的 prototype 属性是否出现在对象的原型链中的任何位置。\r\n\r\n```js\r\nfunction myInstanceof(left, right) {\r\n  // 获取对象的原型\r\n  let proto = Object.getPrototypeOf(left)\r\n  // 获取构造函数的 prototype 对象\r\n  let prototype = right.prototype; \r\n \r\n  // 判断构造函数的 prototype 对象是否在对象的原型链上\r\n  while (true) {\r\n    if (!proto) return false;\r\n    if (proto === prototype) return true;\r\n    // 如果没有找到，就继续从其原型上找，Object.getPrototypeOf方法用来获取指定对象的原型\r\n    proto = Object.getPrototypeOf(proto);\r\n  }\r\n}\r\n```"},"8cdc":function(r,n,t){"use strict";t.r(n),n["default"]="## var、let、const 区别？\r\n\r\n- var 存在变量提升。\r\n- let 只能在块级作用域内访问。\r\n- const 用来定义常量，必须初始化，不能修改（对象特殊）"},ac35:function(r,n,t){"use strict";t.r(n),n["default"]="## javascript的内存(垃圾)回收机制？\r\n\r\n- 垃圾回收器会每隔一段时间找出那些不再使用的内存，然后为其释放内存\r\n- 一般使用**标记清除方法(mark and sweep)**, 当变量进入环境标记为进入环境，离开环境标记为离开环境垃圾回收器会在运行的时候给存储在内存中的所有变量加上标记，然后去掉环境中的变量以及被环境中变量所引用的变量（闭包），在这些完成之后仍存在标记的就是要删除的变量了\r\n- 还有**引用计数方法(reference counting)**, 在低版本IE中经常会出现内存泄露，很多时候就是因为其采用引用计数方式进行垃圾回收。引用计数的策略是跟踪记录每个值被使用的次数，当声明了一个 变量并将一个引用类型赋值给该变量的时候这个值的引用次数就加1，如果该变量的值变成了另外一个，则这个值得引用次数减1，当这个值的引用次数变为0的时 候，说明没有变量在使用，这个值没法被访问了，因此可以将其占用空间回收，这样垃圾回收器会在运行的时候清理掉引用次数为0的值占用的空间。\r\n- 在IE中虽然JavaScript对象通过标记清除的方式进行垃圾回收，但BOM与DOM对象却是通过引用计数回收垃圾的， 也就是说只要涉及BOM及DOM就会出现循环引用问题。"},b6b3:function(r,n,t){"use strict";t.r(n),n["default"]="## vue的动态组件，异步组件\r\n\r\nxxx"},ce86:function(r,n,t){"use strict";t.r(n),n["default"]='## {} 和 [] 的 valueOf 和 toString 的结果是什么？\r\n\r\n- {} 的 valueOf 结果为 {} ，toString 的结果为 "[object Object]"\r\n- [] 的 valueOf 结果为 [] ，toString 的结果为 ""'},d0d3:function(r,n,t){"use strict";t.r(n),n["default"]="## eval 是做什么的？\r\n\r\n- 它的功能是把对应的字符串解析成 JS 代码并运行；\r\n- 应该避免使用 eval，不安全，非常耗性能（2次，一次解析成 js 语句，一次执行）。"},d381:function(r,n,t){"use strict";t.r(n),n["default"]="## 普通函数和箭头函数区别"},d6dd:function(r,n,t){"use strict";t.r(n),n["default"]="## 为什么 0.1+0.2 ! == 0.3，如何让其相等\r\n\r\n因为使用了 IEEE 754 数值，这种错误并非 ECMAScript 所独有。其他使用相同格式的语言也有这个问题。\r\n\r\n解决办法：\r\n\r\n```js\r\n// 换成别的数字\r\n(0.1*10+0.2*10)/10 === 0.3\r\n\r\n// 保留小数位数\r\nparseFloat((0.1+0.2).toFixed(10)) === 0.3\r\n```"},de48:function(r,n,t){"use strict";t.r(n),n["default"]="## ajax过程？\r\n\r\n- (1)创建XMLHttpRequest对象,也就是创建一个异步调用对象.\r\n- (2)创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息.\r\n- (3)设置响应HTTP请求状态变化的函数.\r\n- (4)发送HTTP请求.\r\n- (5)获取异步调用返回的数据.\r\n- (6)使用JavaScript和DOM实现局部刷新."},e4db:function(r,n,t){"use strict";t.r(n),n["default"]="## new 操作符具体干了什么呢？\r\n\r\n1. 创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。\r\n2. 属性和方法被加入到 this 引用的对象中。\r\n3. 新创建的对象由 this 所引用，并且最后隐式的返回 this 。"},f0c7:function(r,n,t){"use strict";t.r(n),n["default"]="## scoped原理\r\n\r\n收集中..."},f499:function(r,n,t){"use strict";t.r(n),n["default"]="## 如何获取安全的 undefined 值？\r\n\r\n因为 undefined 是一个标识符，所以可以被当作变量来使用和赋值，但是这样会影响 undefined 的正常判断。表达式 void ___ 没有返回值，因此返回结果是 undefined。void 并不改变表达式的结果，只是让表达式不返回值。因此可以用 void 0 来获得 undefined。"},f4bf:function(r,n,t){"use strict";t.r(n),n["default"]='## 任意类型到字符串、数字值、布尔值的转换规则？\r\n\r\n### 1、字符串\r\n\r\n- Null 和 Undefined 类型 ，null 转换为 "null"，undefined 转换为 "undefined"。\r\n- Boolean 类型，true 转换为 "true"，false 转换为 "false"。\r\n- Number 类型的值直接转换，不过那些极小和极大的数字会使用指数形式。\r\n- Symbol 类型的值直接转换，但是只允许显式强制类型转换，使用隐式强制类型转换会产生错误。\r\n- 对普通对象来说，除非自行定义 toString() 方法，否则会调用 toString()（Object.prototype.toString()）来返回内部属性 `[[Class]]` 的值，如"`[object Object]`"。如果对象有自己的 toString() 方法，字符串化时就会调用该方法并使用其返回值。\r\n\r\n### 2、数字值\r\n\r\n- Undefined 类型的值转换为 NaN。\r\n- Null 类型的值转换为 0。\r\n- Boolean 类型的值，true 转换为 1，false 转换为 0。\r\n- String 类型的值转换如同使用 Number() 函数进行转换，如果包含非数字值则转换为 NaN，空字符串为 0。\r\n- Symbol 类型的值不能转换为数字，会报错。\r\n- 对象（包括数组）会首先被转换为相应的基本类型值，如果返回的是非数字的基本类型值，则再遵循以上规则将其强制转换为数字。\r\n\r\n为了将值转换为相应的基本类型值，抽象操作 ToPrimitive 会首先（通过内部操作 DefaultValue）检查该值是否有valueOf()方法。如果有并且返回基本类型值，就使用该值进行强制类型转换。如果没有就使用 toString() 的返回值（如果存在）来进行强制类型转换。\r\n\r\n如果 valueOf() 和 toString() 均不返回基本类型值，会产生 TypeError 错误。\r\n\r\n### 3、布尔值\r\n\r\n以下这些是假值： • undefined • null • false • +0、-0 和 NaN • ""\r\n\r\n假值的布尔强制类型转换结果为 false。从逻辑上说，假值列表以外的都应该是真值。'}}]);