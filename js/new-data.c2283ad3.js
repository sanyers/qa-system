(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["new-data"],{"9b48":function(n,r,t){"use strict";t.r(r),r["default"]="## 假设你正在爬楼梯。需要 n 阶你才能到达楼顶。\r\n\r\n每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？\r\n\r\n### 解题思路\r\n\r\n由题目可知，到第 n 层的不同方法有 `f(n)` 种，每次有 1 或 2 个台阶两种选择\r\n\r\n那么爬 n 阶的方法数 = 爬 `n-1` 阶的方法数 + 爬 `n-2` 阶的方法数，即 `f(n) = f(n-1) + f(n-2)`\r\n\r\n这不就是 **斐波那契数列**\r\n\r\n### 实现代码\r\n\r\n```js\r\nfunction calc(n) {\r\n  if (n <= 2) return n;\r\n  const nums = [];\r\n  nums[1] = 1;\r\n  nums[2] = 2;\r\n  for (let i = 3; i <= n; i++) {\r\n    nums[i] = nums[i - 1] + nums[i - 2];\r\n  }\r\n  return nums[n];\r\n}\r\n\r\nconst v = calc(10);\r\nconsole.log(v); // 89\r\n```"},"9def":function(n,r,t){"use strict";t.r(r),r["default"]="## 聊一聊webpack"},aaa0:function(n,r,t){"use strict";t.r(r),r["default"]="## webpack如何配置\r\n\r\nxxx"},f6ec:function(n,r,t){"use strict";t.r(r),r["default"]="## 二叉树以及实现一个方法判断二叉树是否对称\r\n\r\n收集中..."}}]);